---
stages:
- name: Build server and worker
  inputs:
  - service: ${SAMPLE_REPO}
    type: git
    branch: ibm-devops
    dir_name: null
  properties:
  - name: BLUE_GREEN
    type: text_area
    value: ${DEPLOY_SCRIPT}
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash
      # your script here
      echo "commit=${GIT_COMMIT}" >> ./commit.properties
      echo "git_url=${GIT_URL}" >> ./commit.properties
      echo "${BLUE_GREEN}" > blue_green.sh
      chmod a+x blue_green.sh
- name: Test server
  inputs:
  - type: job
    stage: Build server and worker
    job: Build
    dir_name: null
  properties:
  - name: DHIR_NAME
    value: ${DHIR_NAME}
    type: text
  - name: CLAMAV_NAME
    value: ${CLAMAV_NAME}
    type: text
  jobs:
  - name: Tests
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME1}
    script: "#!/bin/bash\nexport EXT_DIR=$(pwd)\nsudo apt-get -y install apt-transport-https\
      \ ca-certificates &> $EXT_DIR/dockerinst.out\n    sudo apt-key adv --keyserver\
      \ hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\
      \ &>> $EXT_DIR/dockerinst.out\n    sudo add-apt-repository \"deb https://apt.dockerproject.org/repo\
      \ ubuntu-precise main\" &>> $EXT_DIR/dockerinst.out\n    sudo apt-get update\
      \ &>> $EXT_DIR/dockerinst.out\n    sudo apt-get -y install docker-engine &>>\
      \ $EXT_DIR/dockerinst.out\nif [ -f $EXT_DIR/utilities/cfic826.tgz ]; then\n\
      \        tar zxf $EXT_DIR/utilities/cfic826.tgz\n    else\n        wget https://static-ice.ng.bluemix.net/ibm-containers-linux_x64\
      \ &> /dev/null\n    fi\n    chmod 755 $EXT_DIR/ibm-containers-linux_x64\n  \
      \   echo \"Installing IBM Containers plugin (cf ic)\"\n     cf install-plugin\
      \ -f $EXT_DIR/ibm-containers-linux_x64 &> /dev/null\ncf ic init\n# Prepare testing\
      \ environment\nexport TESTING_ENV=testing\n\n# Install the dependencies\nexport\
      \ PATH=/opt/IBM/node-v6.7.0/bin:$PATH\nnpm install\n\n# GET CLAMAV endpoint\n\                                                   \
      CLAMAV_IP=$(cf ic inspect -f ''{{.NetworkSettings.PublicIpAddress}}'' $CLAMAV_NAME)\n\
      \n# GET DHIR NGINX ENDPOINT \nDHIR_NGINX_ENDPOINT=$(cf app $DHIR_NAME | grep\
      \ 'urls' | tr -d ' ' | cut -d ':' -f 2) \n\nif [ -z $DHIR_NGINX_ENDPOINT ]\n\
      then\n  DHIR_NGINX_ENDPOINT=$(cf app $DHIR_NAME | grep 'routes' | tr -d ' '\
      \ | cut -d ':' -f 2) \nfi\n\n# Get VCAP env setup\nnode scripts/env.js CLAMAV_ENDPOINT=$CLAMAV_IP\
      \  PHIX_ENDPOINT_DICTIONARY=$DHIR_NGINX_ENDPOINT  PHIX_ENDPOINT_RETRIEVAL=$DHIR_NGINX_ENDPOINT\
      \   PHIX_ENDPOINT_SUBMISSION=$DHIR_NGINX_ENDPOINT\n\n# update user provided\
      \ service\ncf uups env_setup -p local.json \n\n# Run the tests\nnpm test\n"
- name: Deploy server
  inputs:
  - type: job
    stage: Build server and worker
    job: Build
    dir_name: null
  properties:
  - name: ICON_DOMAIN
    type: text
    value: ${ICON_DOMAIN}
  jobs:
  - name: Deploy server
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME1}
    script: |-
      #!/bin/bash
      ./blue_green.sh -d ${ICON_DOMAIN} -n ${CF_APP} -f bluemix/dev-main-manifest.yml
  - name: Deploy worker
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME2}
    script: |-
      #!/bin/bash
      ./blue_green.sh -f bluemix/dev-worker-manifest.yml
- name: Tagging
  inputs:
  - type: job
    stage: Build server and worker
    job: Build
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: GIT_USER
    type: secure
  - name: GIT_PASS
    type: secure
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: shell
    script: "#!/bin/bash\n# your script here\nls\necho  \"get commit number\" \nCOMMIT_NUMBER=`bash\
      \ scripts/read_properties.sh commit.properties commit`\nGITURL=`bash scripts/read_properties.sh\
      \ commit.properties git_url`\n\nURL=`awk -F// '{ print $2}' <<<\"${GITURL}\"\
      `\n\necho \"clone repo\"\ngit clone https://$GIT_USER:$GIT_PASS@$URL\ncd icon-r2-backend\n\
      \necho \"check out $COMMIT_NUMBER\"\ngit checkout ${COMMIT_NUMBER}\n\n\nTAG=\"\
      build-${BUILD_NUMBER}-$(date +%Y-%m-%d)\"\necho \"Creating tag: $TAG\"\ngit\
      \ tag $TAG\n\n#git push --tags\n\n"
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api.ng.bluemix.net/v1/messaging/webhook/publish
